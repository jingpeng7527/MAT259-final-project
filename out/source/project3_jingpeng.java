/* autogenerated by Processing revision 1293 on 2024-03-19 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import peasy.*;
import controlP5.*;
import java.util.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class project3_jingpeng extends PApplet {

/*************************************************************************************
Mat 259 Project 3 3D Visualization: "movie ratings since 2020 based on IMDb Non-Commercial dataset"               
Tested in Processing 4                                  
                                                     
Author: Jing Peng                       
Supervisor: George Legrady                           

Purpose: Show how to present volume data in a basic 3D environment     

Usage: 1. A mouse left-drag will rotate the camera around the subject.
          2. A right drag will zoom in and out. 
          3. A middle-drag (command-left-drag on mac) will pan. 
          4. A double-click restores the camera to its original position. 
          5. The shift key constrains rotation and panning to one axis or the other.
*************************************************************************************/





PeasyCam cam;
ControlP5 cp5;

PFont font;

int startYear = 2020;
int endYear = 2023;

int[] fontSize = {280, 14, 12};
int[] fontColor = {240, 180};

float radiusMultiplier = 100; // Multiplier for percentage-based radius
float minRadius = 300; // Minimum radius for points
float maxRadius = 200; // Maximum radius for points
float Radius = 200;
float radius = 300;
PVector[] points;
int[] categoryColors = {0xFFFFC0CB, 0xFFFFE5B4, 0xFFADD8E6, 0xFFF0FFF0, 0xFFE6E6FA, 0xFFFFDAB9, 0xFF87CEEB, 0xFFFFFFE0, 0xFFE6E6FA, 0xFF90EE90, 0xFFB0E0E6, 0xFFFFDAB9, 0xFFC8A2C8, 0xFFAFEEEE, 0xFFFFFFCC, 0xFFF0DC82};
int[] kind;


Table table;
int numRows, numColumns;

// Colors
int background = color(30);
int foreground = color(225);

// Result of search keywords
List<String> selectedKeywords = new ArrayList();

// Entered text
String textValue = "";

// Save the movies of different year
//Map<Integer, ArrayList<Movie>> map = new HashMap<Integer,ArrayList<Movie>>();
//List<List<PVector>> listAll = new ArrayList<>();

Map<String, Movie> map = new HashMap<>();

ArrayList<Movie> list = new ArrayList<>();

public void setup() {
  /* size commented out by preprocessor */;
  font = createFont("Arial", 100);
  cam = new PeasyCam(this, 1000);
  // cam.setMinimumDistance(50);
  // cam.setMaximumDistance(800);
  cp5 = new ControlP5(this);

  loadData();
  //drawInfo();
  constructGUI();
}

public void draw() {
  background(background);
  selectedKeywords.clear();

    pushMatrix();
    drawPoints();

    popMatrix();

  //drawAxis();
    drawGUI();

}
class Movie{
    String title;
    String genres;
    int year;
    float rating;
    int votes;
    String tconst;

    Movie(int year, float rating, int votes, String title, String genres, String tconst){
        this.rating = rating;
        this.votes = votes;
        this.genres = genres;
        this.year = year;
        this.title = title;
        this.tconst = tconst;
    }

    // Setter for title
    public void setTitle(String title) {
        this.title = title;
    }

    // Getter for title
    public String getTitle() {
        return title;
    }

    // Setter for genres
    public void setGenres(String genres) {
        this.genres = genres;
    }

    // Getter for genres
    public String getGenres() {
        return genres;
    }
    
    // Setter for tconst
    public void setTconst(String tconst) {
        this.tconst = tconst;
    }

    // Getter for tconst
    public String getTconst() {
        return tconst;
    }

    // Setter for year
    public void setYear(int year) {
        this.year = year;
    }

    // Getter for year
    public int getYear() {
        return year;
    }

    // Setter for rating
    public void setRating(float rating) {
        this.rating = rating;
    }

    // Getter for rating
    public float getRating() {
        return rating;
    }

    // Setter for votes
    public void setVotes(int votes) {
        this.votes = votes;
    }

    // Getter for votes
    public int getVotes() {
        return votes;
    }
}
public void constructGUI() {
  cp5.addTextfield("input")
    .setPosition(width-15-150, 15)
    .setSize(150, 30)
    .setFont(createFont("SansSerif", 15))
    .setColor(background)
    .setColorActive(color(foreground))
    .setColorBackground(color(foreground, 200))
    .setColorForeground(background)
    .setColorCaptionLabel(foreground)
    .setColorCursor(background)
    .getCaptionLabel().setVisible(false);
    
  List l = Arrays.asList("a", "b", "c", "d", "e", "f", "g", "h");
  cp5.addScrollableList("dropdown")
     .setPosition(width-15-150, 50)
     .setSize(150, height-100)
     .setBarHeight(20)
     .setItemHeight(20)
     .addItems(l)
     //.addItems(selectedKeywords)
     .setFont(createFont("SansSerif", 10))
     .setType(ControlP5.LIST)
     .setColorActive(color(foreground))
     .setColorBackground(color(foreground, 200))
     .setColorForeground(background)
     .setColorCaptionLabel(foreground)
     .setColorValue(background)
     .getCaptionLabel().setVisible(false);

  cp5.setAutoDraw(false);
}

public void drawGUI() {
  hint(DISABLE_DEPTH_TEST);
  cam.beginHUD();
  textFont(font);
  stats();  
  
  pushMatrix();
  textFont(font);
  textSize(12);
  fill(0xFFFFFFFF, 150);
  textAlign(RIGHT, BOTTOM);
  text("MAT 259 | Jing Peng", width-15, height-45);
  text("Movies rating since 2020 from IMDb",  width-15, height-30);
  text("Data Source: IMDb Non-Commercial Datasets", width-15, height-15);
  textValue = cp5.get(Textfield.class, "input").getText();

  textSize(20);
  textAlign(LEFT, TOP);  
   text("Movies rating since 2020 from IMDb", 15, 15);
   text("MAT 259 | Jing Peng", 15, 45);

  popMatrix();
  cp5.draw();

  cam.endHUD();
  hint(ENABLE_DEPTH_TEST);
}

public void stats(){
  if(selectedKeywords.size() == 0)
    return;
    
  Movie w = map.get(selectedKeywords.get(0));

  textSize(45);
  textAlign(LEFT, CENTER);
  text(w.title, 15, height-150);
  
  fill(foreground);
  textSize(20);
  text("Year: " + w.year, 20, height-100);
  text("Rating: " + w.rating, 20, height-75);
  text("Votes: " + w.votes, 20, height-50);
  text("Genres: " + w.genres, 20, height-25);
}

public void drawAxis(){
    pushMatrix();
    stroke(100);
    noFill();
    strokeWeight(1);
    translate(-0.5f*minRadius,0,0);
    box(2*minRadius,2*1.2f*minRadius,2*minRadius);
    popMatrix();
    
    fill(foreground);
    textSize(25);
    textAlign(RIGHT, BOTTOM);
    pushMatrix();
    translate(1*minRadius, 1.2f*minRadius, 0);
    text("Rating", 0, 0);
    popMatrix();
    
    textAlign(LEFT, BOTTOM);
    pushMatrix();
    translate(0, -1.2f*minRadius, minRadius);
    rotate(-HALF_PI, 0, 1, 0);
    text("Year", 0, 0);
    popMatrix();
    
    pushMatrix();
    translate(-1.5f*minRadius, 1.2f*minRadius, 0);
    rotate(3*HALF_PI, 0, 0, 1);
    text("Votes", 0, 0);
    popMatrix();
}
public void drawPoints(){

    for(int i =0; i<list.size();i++){
        // PVector p1 = cur.get(i);
        Movie curMovie = list.get(i);
        
        float transparence = map(curMovie.votes, 5000, 590000, 60, 300);
        float pointSize = map(curMovie.votes, 5000, 590000, 6, 15);
        float titleSize = map(curMovie.votes, 5000, 590000, 15, 20);
        
        float x = map(curMovie.rating, 1.0f, 10.0f, -1.5f*minRadius, 0.5f*minRadius);
        float y = map(curMovie.votes, 5000, 865773, -1.2f*minRadius, 1.2f*minRadius);
        float z = map(curMovie.year, 2020, 2024, -minRadius, minRadius);

        pushMatrix();
        stroke(0xFFFFFFFF, transparence);
        strokeWeight(pointSize);
        //stroke(#FFFFFF, random(150, 255));
        translate(x, y, z);
        point(0,0,0);
        
        pushMatrix();
        textAlign(LEFT, TOP);
        textFont(font, titleSize);
        
         try{
              if("".equals(textValue)){
                cp5.get(ScrollableList.class, "dropdown").hide();
                fill(foreground, 100);
                textSize(titleSize);   
              }
           else if(match(curMovie.title, textValue) != null){
              cp5.get(ScrollableList.class, "dropdown").show();
              String ge = curMovie.genres.split(",", 1)[0];
              fill(pickColor(ge), 200);
              textSize(titleSize*1.5f);
              selectedKeywords.add(curMovie.title);
              cp5.get(ScrollableList.class, "dropdown").setItems(selectedKeywords);
            }
            else{
              fill(foreground, 100);
              textSize(titleSize);
            }
          }
          catch(Exception e){
            fill(background);
            textSize(8);
          }
          
        if(selectedKeywords.size() == 0) 
            cp5.get(ScrollableList.class, "dropdown").hide();

        if (curMovie.rating < 7) {
            //println("rating!!!"+curMovie.rating);
            textAlign(RIGHT, TOP);
            rotateY(-PI/2);
        }
        text(curMovie.title, 0,0,0);    
        popMatrix();
        popMatrix();
    }

}
public int pickColor(String genre){
  if("Action".equals(genre))
    return categoryColors[15];
  else if("Adventure".equals(genre))
    return categoryColors[0];
  else if("Animation".equals(genre))
    return categoryColors[1];
  else if("Biography".equals(genre))
    return categoryColors[2];
  else if("Comedy".equals(genre))
    return categoryColors[3];
  else if("Crime".equals(genre))
    return categoryColors[4];
  else if("Documentary".equals(genre))
    return categoryColors[5];
  else if("Drama".equals(genre))
    return categoryColors[6];
  else if("Family".equals(genre))
    return categoryColors[7];
   else if("Fantasy".equals(genre))
    return categoryColors[8];
   else if("History".equals(genre))
    return categoryColors[9];
   else if("Horror".equals(genre))
    return categoryColors[10];
    else if("Mystery".equals(genre))
    return categoryColors[11];
    else if("Romance".equals(genre))
    return categoryColors[12];
   else if("Sci-Fi".equals(genre))
    return categoryColors[13];
   else
    return categoryColors[14];
}
// the part is from Mert Toka
public void dropdown(int n) {
  ///* request the selected item based on index n */
  cp5.get(Textfield.class, "input").setText((String)cp5.get(ScrollableList.class, "dropdown").getItem(n).get("name"));
  
  /* here an item is stored as a Map  with the following key-value pairs:
   * name, the given name of the item
   * text, the given text of the item by default the same as name
   * value, the given value of the item, can be changed by using .getItem(n).put("value", "abc"); a value here is of type Object therefore can be anything
   * color, the given color of the item, how to change, see below
   * view, a customizable view, is of type CDrawable 
   */
  
  CColor c = new CColor();
  c.setBackground(color(255,0,0));
  cp5.get(ScrollableList.class, "dropdown").getItem(n).put("color", c);
}
//void keyPressed() {
//  //use arrow keys to select increasing/decreasing years
//  if (keyCode == 38) {
//    startSelect--;
//    if (startSelect < 0) {
//      startSelect = YEAR_COUNT -1;
//    }
//  } 
//  if (keyCode == 40) {
//    startSelect++;
//    if (startSelect >= YEAR_COUNT) {
//      startSelect = 0;
//    } 
//  }
  
//  //use +/- to increase scale of selected year
//  //need to use log scale so its apparent
//  //println("key: ", keyCode);
//  if (keyCode == 61 && heightMult < 8) {
//    //plus
//    heightMult = heightMult * 1.5;
//  }
//  if (keyCode == 45) {
//    //minus
//    if (heightMult >= 1.5) {
//      heightMult = heightMult /1.5;
//    } else {
//      heightMult = 1.0;
//    }
//  }
//}
public void loadData() {
   table = loadTable("movie2023-2.csv", "header");
   numRows = table.getRowCount();
   
   for(int i=0; i<numRows; i++){
    int year = table.getInt(i,5);
    String title = table.getString(i,3);
    String genres = table.getString(i,7);

    float rating = table.getFloat(i,8);
    int votes = table.getInt(i,9);
    String tconst = table.getString(i,1);

    //ArrayList<Movie> list = map.getOrDefault(year, new ArrayList<>());
    Movie m = new Movie(year, rating, votes, title, genres, tconst);
    list.add(m);
    
    map.put(title, m);
   }
}


  public void settings() { size(1250, 800, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "project3_jingpeng" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
